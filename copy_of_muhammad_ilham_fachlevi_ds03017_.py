# -*- coding: utf-8 -*-
"""Copy of Muhammad Ilham Fachlevi_DS03017 .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KjwYdKska4LH7ov0bkJrvzcOzXhh7S5R

# kaggle installation
"""

# install kaggle
!pip install -q kaggle

from google.colab import files
files.upload()

# create a kaggle folder
!mkdir ~/.kaggle

# copy the kaggle.json to folder created  
!cp kaggle.json ~/.kaggle/

# permisson for the json to act
!chmod 600 ~/.kaggle/kaggle.json

# to list all avalaible datasets in kaggle
!kaggle datasets list

!kaggle datasets download -d olistbr/brazilian-ecommerce

ls

"""# import libraries needed"""

import pandas as pd
import numpy as np
import glob
import os
import numpy as numpy
import matplotlib.pyplot as plt
import seaborn as sns
import zipfile
import datetime as dt
import statsmodels.api as sm

#!conda --version

"""!pip install -q condacolab
import condacolab
condacolab.install()"""

with zipfile.ZipFile("/content/brazilian-ecommerce.zip","r") as zip_ref:
    zip_ref.extractall("brazilian-ecommerce")

path = r'/content/brazilian-ecommerce' 
all_files = glob.glob(os.path.join(path , "*.csv"))

li = []

for filename in all_files:
    df = pd.read_csv(filename, index_col=None, header=0)
    li.append(df)

frame = pd.concat(li, axis=0, ignore_index=True)

print(all_files)

"""# initializing variables"""

customers = pd.read_csv('/content/brazilian-ecommerce/olist_customers_dataset.csv')
geolocation = pd.read_csv('/content/brazilian-ecommerce/olist_geolocation_dataset.csv')
items = pd.read_csv('/content/brazilian-ecommerce/olist_order_items_dataset.csv')
payments = pd.read_csv('/content/brazilian-ecommerce/olist_order_payments_dataset.csv')
reviews = pd.read_csv('/content/brazilian-ecommerce/olist_order_reviews_dataset.csv')
orders = pd.read_csv('/content/brazilian-ecommerce/olist_orders_dataset.csv')
products = pd.read_csv('/content/brazilian-ecommerce/olist_products_dataset.csv')
name = pd.read_csv('/content/brazilian-ecommerce/product_category_name_translation.csv')
sellers = pd.read_csv('/content/brazilian-ecommerce/olist_sellers_dataset.csv')

data = {
    'customers': customers,
    'geolocation': geolocation,
    'items': items,
    'paymens':payments,
    'reviews':reviews,
    'orders':orders,
    'products':products,
    'name':name,
    'sellers':sellers
}

customers.info()

geolocation.info()

items.info()

payments.info()

reviews.info()

orders.info()

products.info()

sellers.info()

for name, df in data.items():
  key_count = [col for col in df.columns if 'id' in col or 'code' in col]
  print(f'{name}: {len(key_count)} PKs pr FKs')
  print(f'{key_count}\n')

"""# data cleaning"""

for name, df in data.items():
  if df.isnull().any().any():
    print('dataset:',name ,"\n")
    print(f'{df.isnull().sum()}\n')

orders = orders.dropna(axis='index',subset=['order_approved_at','order_delivered_carrier_date','order_delivered_customer_date'])

products = products.dropna(axis='index',subset=['product_category_name', 'product_name_lenght', 'product_description_lenght',
                                                'product_photos_qty', 'product_weight_g', 'product_length_cm', 'product_width_cm' ])

# reviews = reviews.dropna(axis='index',subset=['review_comment_title', 'review_comment_message'])

orders.isnull().sum()

products.isnull().sum()

payments.isnull().sum()

"""# transforming data

data['orders'].order_purchase_timestamp = pd.to_datetime(data['orders'].order_purchase_timestamp).dt.date
data['orders'].order_delivered_customer_date = pd.to_datetime(data['orders'].order_delivered_customer_date).dt.date
data['orders'].order_estimated_delivery_date = pd.to_datetime(data['orders'].order_estimated_delivery_date).dt.date
"""

times = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date',
         'order_estimated_delivery_date', 'order_estimated_delivery_date']

for col in times:
  orders[col]=pd.to_datetime(orders[col])

orders.info()

"""# merging data"""

data_schema = orders.merge(customers, on="customer_id").merge(items, on="order_id").merge(products, on="product_id").merge(payments, on="order_id").merge(sellers, on="seller_id").merge(reviews, on="order_id")

data_schema.head()

items['price']

data_schema[['price', 'product_category_name']]

"""# The Number of Product Orders Purchased Based on The States"""

plt.figure(figsize=(15,10))
sns.countplot(x ='geolocation_state', data=geolocation, 
              order=geolocation['geolocation_state'].value_counts().sort_values(ascending=False).index, 
              palette='bright').set_title("Product Orders Purchased Based on The States", fontsize=15,
                                             weight='bold')

"""# The Amount of Online Order by Year"""

orders['order_purchase_year'] = \
orders['order_purchase_timestamp'].apply(lambda x: x.year)
orders['order_purchase_month'] = \
orders['order_purchase_timestamp'].apply(lambda x: x.month)
orders['order_purchase_dayofweek'] = \
orders['order_purchase_timestamp'].apply(lambda x: x.dayofweek)

fig, ax = plt.subplots(figsize=(10, 5))
ax = sns.countplot(x='order_purchase_year', data=orders, order=orders['order_purchase_year'].value_counts().
                   sort_values(ascending=False).index, palette='dark')

ncount = len(orders)

for p in ax.patches:
 x=p.get_bbox().get_points()[:,0]
 y=p.get_bbox().get_points()[1,1]
 ax.annotate('{:.1f}%'.format(100.*y/ncount), (x.mean(), y),
 ha='center', va='bottom', size=12)

ax.set_title('Amount of Online Order by Year', size=14, weight='bold')
ax.set_ylabel('Orders')
ax.set_xlabel('Year')
plt.tight_layout()
plt.show()

"""# Plotting Top 3 Products"""

data_schema['product_name']=data_schema['product_category_name']
plt.figure(figsize=(15,10))
sns.countplot(x='product_name', data=data_schema, palette='bright',
             order=data_schema['product_name'].value_counts()[:3]\
             .sort_values(ascending=False).index).set_title("Top 3 Products", fontsize=15,
                                             weight='bold')

"""# Plotting Top 5 Products"""

plt.figure(figsize=(15,10))
data_schema['product_name'].value_counts()[:5].plot.pie(autopct='%1.1f%%', 
        startangle=90, cmap='tab20', explode= (0.1, 0, 0, 0,0),
        shadow=True)
plt.title("Top 5 Producs",size=14, weight='bold')

"""# Plotting Top 3 Seller States"""

data_schema['seller']=data_schema['seller_city']

plt.figure(figsize=(15,10))
sns.countplot(x='seller', data=data_schema, palette='bright',
             order=data_schema['seller'].value_counts()[:3]\
             .sort_values(ascending=False).index).set_title("Top 3 Seller Cities", fontsize=15,
                                             weight='bold')

"""# Plotting Top 5 Seller Cities"""

plt.figure(figsize=(15,10))
data_schema['seller_city'].value_counts()[:5].plot.pie(autopct='%1.1f%%', 
        startangle=90, cmap='tab20', explode = (0.1, 0, 0, 0,0),
        shadow=True)
plt.title("Top 5 Cities",size=14, weight='bold')

"""# Reviews Score Distributed"""

data_schema['score']=data_schema['review_score']
plt.figure(figsize=(15,10))
sns.countplot(x='score', data=data_schema, palette='dark',
             order=data_schema['score'].value_counts()
             .sort_values(ascending=False).index).set_title("Reviews Score Distributed", fontsize=15,
                                             weight='bold')

plt.figure(figsize=(20,10))
data_schema['score'].value_counts()[:5].plot.pie(autopct='%1.1f%%', 
        startangle=90, cmap='tab20', explode = (0.1, 0, 0, 0,0),
        shadow=True)
plt.title("Reviews Score Distributed",size=14, weight='bold')

"""# Top Payments"""

data_schema['prices'] = data_schema['price'].astype(int)

data_schema['price'] = data_schema['payment_type']

data_schema['price']=data_schema['price']
plt.figure(figsize=(15,10))
sns.countplot(x='price', data=data_schema, palette='pastel',
             order=data_schema['price'].value_counts()[:10]\
             .sort_values(ascending=False).index).set_title("Top Payments", fontsize=15,
                                             weight='bold')

"""# Top Payments with The Highest Value"""

data_schema['payment'] = data_schema['payment_value'].astype(int)

top_payments = data_schema.groupby("payment_type")["payment"].max().reset_index().sort_values("payment", ascending=False)
top_payments.rename(columns={"payment":"total_paid"}, inplace=True)
top_payments

fig, ax = plt.subplots(figsize=(15, 10))
sns.barplot(x='payment_type', y='total_paid', data=top_payments, palette='bright')
ax.set_title('Top Payments with The Highest Value', size=15, weight='bold')
ax.set_xlabel('Payment Type')
ax.set_ylabel('Values')
plt.show()

"""# Top Product Category with The Highest Price"""

data_schema[['price','product_category_name']]

data_schema['price'] = data_schema['price'].astype(int)

data_schema['price']

data_schema['price'].describe()

top_price = data_schema.groupby("product_category_name")["price"].max().reset_index().sort_values("price", ascending=False)
top_price.rename(columns={"price":"total_price"}, inplace=True)
top_price

fig, ax = plt.subplots(figsize=(15, 10))
sns.barplot(x='product_category_name', y='total_price', data=top_price[:5], palette='pastel')
ax.set_title('Top Product Category with The Highest Price', size=15, weight='bold')
ax.set_xlabel('Product Category Name')
ax.set_ylabel('Price')
plt.show()

"""# Top Product Category with The Highest Freight Value"""

data_schema['freight_value'] = data_schema['freight_value'].astype(int)

top_products = data_schema.groupby("product_category_name")["freight_value"].max().reset_index().sort_values("freight_value", ascending=False)
top_products.rename(columns={"freight_value":"total_value"}, inplace=True)
top_products

fig, ax = plt.subplots(figsize=(15, 10))
sns.barplot(x='product_category_name', y='total_value', data=top_products[:5], palette='dark')
ax.set_title('Top Product Category with The Highest Freight Value', size=15, weight='bold')
ax.set_xlabel('Product Category Name')
ax.set_ylabel('Freight Values')
plt.show()

"""# Top 10 Customers"""

top_customers = data_schema.groupby("customer_id")["payment_value"].sum().reset_index().sort_values("payment_value", ascending=False)
top_customers.rename(columns={"payment_value":"total_paid"}, inplace=True)
top_customers

top_customers['customer'] = top_customers['customer_id'].str[-8:]

top_customers.rename(columns={"payment_value" : "total_paid"}, inplace=True)
fig, ax = plt.subplots(figsize=(13, 10))
ax = sns.barplot(x='customer', y="total_paid", data=top_customers[:10])
sns.lineplot(data = top_customers[:10], marker='o', x="customer", y="total_paid", sort = False, ax=ax)
ax.set_title("Top 10 Customers by total paid", weight='bold')
ax.set_ylabel("Total Paid")
ax.set_xlabel("Customer id")
plt.xticks(rotation=45, ha='right')

"""# Top 10 Sellers"""

top_sellers = data_schema.groupby("seller_id")["score"].sum().reset_index().sort_values("score", ascending=False)
top_sellers.rename(columns={"score":"total_score"}, inplace=True)
top_sellers

top_sellers['seller'] = top_sellers['seller_id'].str[-8:]

fig, ax = plt.subplots(figsize=(13, 10))
ax = sns.barplot(x="seller", y="total_score", data=top_sellers[:10])
sns.lineplot(data = top_sellers[:10], marker='o', x="seller", y="total_score", sort = False, ax=ax)
ax.set_title("Top 10 Sellers by total scores", weight='bold')
ax.set_ylabel("Total Score")
ax.set_xlabel("Seller id")
plt.xticks(rotation=45, ha='right')

"""# Top 5 Cities by Number of Orders"""

top_orders_cities = data_schema.groupby("customer_city")["order_id"].count().reset_index().sort_values("order_id", ascending=False)
top_orders_cities.rename(columns={"order_id":"count"}, inplace=True)
top_orders_cities

top_orders_cities = data_schema.groupby("customer_city")["order_id"].count().reset_index().sort_values("order_id", ascending=False)
top_orders_cities.rename(columns={"order_id":"count"}, inplace=True)
fig, ax = plt.subplots(figsize=(13, 10))
ax = sns.barplot(x="customer_city", y="count", data=top_orders_cities[:5])
sns.lineplot(data = top_orders_cities[:5], marker='o', x="customer_city", y="count", sort = False, ax=ax)
ax.set_title("Top 5 Cities by Number of Orders", weight='bold')
ax.set_xlabel("Customer City")
ax.set_ylabel("Count")

"""# Top 5 States by Number of Orders"""

top_orders_states = data_schema.groupby("customer_state")["order_id"].count().reset_index().sort_values("order_id", ascending=False)
top_orders_states.rename(columns={"order_id":"count"}, inplace=True)
top_orders_states

top_orders_cities = data_schema.groupby("customer_state")["order_id"].count().reset_index().sort_values("order_id", ascending=False)
top_orders_cities.rename(columns={"order_id":"count"}, inplace=True)
fig, ax = plt.subplots(figsize=(13, 10))
ax = sns.barplot(x="customer_state", y="count", data=top_orders_cities[:5])
sns.lineplot(data = top_orders_cities[:5], marker='o', x="customer_state", y="count", sort = True, ax=ax)
ax.set_title("Top 5 States by Number of Orders", weight='bold')
ax.set_xlabel("Customer State")
ax.set_ylabel("Count")

"""# The Day with Highest Demand of Transaction"""

data_schema['day_of_week'] = data_schema['order_purchase_timestamp'].dt.dayofweek

data_schema

def dayNameFromWeekday(weekday):
    if weekday == 0:
        return "Monday"
    if weekday == 1:
        return "Tuesday"
    if weekday == 2:
        return "Wednesday"
    if weekday == 3:
        return "Thursday"
    if weekday == 4:
        return "Friday"
    if weekday == 5:
        return "Saturday"
    if weekday == 6:
        return "Sunday"

data_schema['day_name'] = data_schema['day_of_week'].apply(dayNameFromWeekday)
data_schema.drop('day_of_week',axis=1)

plt.figure(figsize=(15,10))
sns.countplot(x='day_name', data=data_schema, palette='bright',
             order=data_schema['day_name'].value_counts()
             .sort_values(ascending = False).index).set_title("Day with The Highest Demand of Transaction", fontsize=15,
                                             weight='bold')

plt.figure(figsize=(20,10))
colors = ['#FF0000', '#0000FF', '#FFFF00', 
          '#ADFF2F', '#FFA500']
data_schema['day_name'].value_counts()[:5].plot.pie(autopct='%1.1f%%', 
        startangle=90, cmap='tab20', explode = (0.1, 0, 0, 0,0),
        shadow=True, colors=colors)
plt.title("Day with The Highest Demand of Transaction",size=14, weight='bold')

"""# Total Orders by Year"""

sales_period_yearmonth['order_delivered_customer_date'] = data_schema['order_delivered_customer_date'].dt.to_period('M')
sales_period_yearmonth.head()

data_order = sales_period_yearmonth.groupby(['order_delivered_customer_date']).agg(
    total_order_monthly = pd.NamedAgg(column = 'order_id', aggfunc='count'))

dataOrderdf = pd.DataFrame(data = data_order)

dataOrderdf.head()

dataOrderdf.plot.line(figsize=(10,7), title='Total Order', grid=True, fontsize=11)